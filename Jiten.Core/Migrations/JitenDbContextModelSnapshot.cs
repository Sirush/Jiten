// <auto-generated />
using System.Collections.Generic;
using Jiten.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Jiten.Core.Migrations
{
    [DbContext(typeof(JitenDbContext))]
    partial class JitenDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("jiten")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JapaneseParser.DictionaryTools.JmDictDefinition", b =>
                {
                    b.Property<int>("DefinitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DefinitionId"));

                    b.Property<List<string>>("DutchMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("EnglishMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("FrenchMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("GermanMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("HungarianMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("PartsOfSpeech")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("RussianMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("SlovenianMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("SpanishMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("WordId")
                        .HasColumnType("integer");

                    b.HasKey("DefinitionId");

                    b.HasIndex("WordId");

                    b.ToTable("Definitions", "jmdict");
                });

            modelBuilder.Entity("JapaneseParser.DictionaryTools.JmDictLookup", b =>
                {
                    b.Property<int>("WordId")
                        .HasColumnType("integer");

                    b.Property<string>("LookupKey")
                        .HasColumnType("text");

                    b.HasKey("WordId", "LookupKey");

                    b.ToTable("Lookups", "jmdict");
                });

            modelBuilder.Entity("JapaneseParser.DictionaryTools.JmDictWord", b =>
                {
                    b.Property<int>("WordId")
                        .HasColumnType("integer");

                    b.Property<List<string>>("KanaReadings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("PartsOfSpeech")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Readings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("WordId");

                    b.ToTable("Words", "jmdict");
                });

            modelBuilder.Entity("Jiten.Core.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("AverageSentenceLength")
                        .HasColumnType("real");

                    b.Property<int>("CharacterCount")
                        .HasColumnType("integer");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<string>("EnglishTitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OriginalTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ParentDeckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("RomajiTitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UniqueKanjiCount")
                        .HasColumnType("integer");

                    b.Property<int>("UniqueKanjiUsedOnceCount")
                        .HasColumnType("integer");

                    b.Property<int>("UniqueWordCount")
                        .HasColumnType("integer");

                    b.Property<int>("UniqueWordUsedOnceCount")
                        .HasColumnType("integer");

                    b.Property<int>("WordCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Decks", "jiten");
                });

            modelBuilder.Entity("Jiten.Core.DeckWord", b =>
                {
                    b.Property<int>("DeckId")
                        .HasColumnType("integer");

                    b.Property<int>("WordId")
                        .HasColumnType("integer");

                    b.Property<byte>("ReadingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ReadingIndex")
                        .HasColumnType("smallint");

                    b.Property<int>("Occurrences")
                        .HasColumnType("integer");

                    b.HasKey("DeckId", "WordId", "ReadingType", "ReadingIndex");

                    b.HasIndex("DeckId")
                        .HasDatabaseName("IX_DeckId");

                    b.HasIndex("WordId", "ReadingType", "ReadingIndex")
                        .HasDatabaseName("IX_WordReadingIndex");

                    b.ToTable("DeckWords", "jiten");
                });

            modelBuilder.Entity("JapaneseParser.DictionaryTools.JmDictDefinition", b =>
                {
                    b.HasOne("JapaneseParser.DictionaryTools.JmDictWord", null)
                        .WithMany("Definitions")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JapaneseParser.DictionaryTools.JmDictLookup", b =>
                {
                    b.HasOne("JapaneseParser.DictionaryTools.JmDictWord", null)
                        .WithMany("Lookups")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jiten.Core.DeckWord", b =>
                {
                    b.HasOne("Jiten.Core.Deck", "Deck")
                        .WithMany("DeckWords")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("JapaneseParser.DictionaryTools.JmDictWord", b =>
                {
                    b.Navigation("Definitions");

                    b.Navigation("Lookups");
                });

            modelBuilder.Entity("Jiten.Core.Deck", b =>
                {
                    b.Navigation("DeckWords");
                });
#pragma warning restore 612, 618
        }
    }
}
