// <auto-generated />
using System.Collections.Generic;
using JapaneseParser.DictionaryTools;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Jiten.Core.Migrations
{
    [DbContext(typeof(JMDictDbContext))]
    partial class JMDictDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JapaneseParser.DictionaryTools.DbDefinition", b =>
                {
                    b.Property<int>("DefinitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DefinitionId"));

                    b.Property<List<string>>("DutchMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("EnglishMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("EntrySequenceId")
                        .HasColumnType("integer");

                    b.Property<List<string>>("FrenchMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("GermanMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("HungarianMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("PartsOfSpeech")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("RussianMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("SlovenianMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("SpanishMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("DefinitionId");

                    b.HasIndex("EntrySequenceId");

                    b.ToTable("Definitions");
                });

            modelBuilder.Entity("JapaneseParser.DictionaryTools.DbJMDictWordInfo", b =>
                {
                    b.Property<int>("EntrySequenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EntrySequenceId"));

                    b.Property<List<string>>("KanaReadings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("PartsOfSpeech")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Readings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("EntrySequenceId");

                    b.ToTable("JMDictWords");
                });

            modelBuilder.Entity("JapaneseParser.DictionaryTools.DbLookup", b =>
                {
                    b.Property<int>("EntrySequenceId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<string>("LookupKey")
                        .HasColumnType("text")
                        .HasColumnOrder(1);

                    b.HasKey("EntrySequenceId", "LookupKey");

                    b.ToTable("Lookups");
                });

            modelBuilder.Entity("JapaneseParser.DictionaryTools.DbDefinition", b =>
                {
                    b.HasOne("JapaneseParser.DictionaryTools.DbJMDictWordInfo", null)
                        .WithMany("Definitions")
                        .HasForeignKey("EntrySequenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JapaneseParser.DictionaryTools.DbLookup", b =>
                {
                    b.HasOne("JapaneseParser.DictionaryTools.DbJMDictWordInfo", null)
                        .WithMany("Lookups")
                        .HasForeignKey("EntrySequenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JapaneseParser.DictionaryTools.DbJMDictWordInfo", b =>
                {
                    b.Navigation("Definitions");

                    b.Navigation("Lookups");
                });
#pragma warning restore 612, 618
        }
    }
}
